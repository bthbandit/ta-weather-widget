{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","week","moment","isoWeek","year","useState","loading","setLoading","undefined","error","setError","weatherThisWeek","setWeatherThisWeek","useEffect","key","loggedWeatherWeek","sessionStorage","getItem","split","process","url","axios","get","then","response","console","log","rows","data","sheets","rowData","map","row","_compact","values","value","formattedValue","filter","arr","length","getThisWeek","_flatten","Number","setItem","toString","catch","season","conditions","winds","highTemp","lowTemp","highInC","toFixed","lowInC","warnings","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","missingWeather","className","toLowerCase","seasonClasses","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wSA2GeA,MApGf,WACE,IAAIC,EAAOC,MAASC,UAChBC,EAAOF,MAASE,OAFP,EAGiBC,oBAAS,GAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIaF,wBAASG,GAJtB,mBAINC,EAJM,KAICC,EAJD,OAKiCL,wBAASG,GAL1C,mBAKNG,EALM,KAKWC,EALX,KAObC,qBAAU,WACR,IAEIC,EAFEC,EAAoBC,eAAeC,QAAQ,aAAeD,eAAeC,QAAQ,aAAaC,MAAM,UAAOV,EAM7GM,EAAMK,0CAEV,IACIC,EAAG,wDADe,+CACf,iBAA0EN,EAA1E,yBAkBHC,GACFH,EAAmBG,GACnBR,GAAW,IAlBYc,IAAMC,IAAIF,GAC9BG,MAAK,SAAUC,GAAW,IAAD,MACxBC,QAAQC,IAAIF,GACZ,IAAMG,EAAI,OAAGH,QAAH,IAAGA,GAAH,UAAGA,EAAUI,YAAb,iBAAG,EAAgBC,OAAO,UAA1B,iBAAG,EAA2BD,KAAK,UAAnC,aAAG,EAAoCE,QAAQC,KAAI,SAAAC,GAAG,OAAIC,IAASD,EAAIE,OAAOH,KAAI,SAAAI,GAAK,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOC,sBAAkBC,QAAO,SAACC,GAAD,OAASA,EAAIC,UAC5IC,EAAcC,IAASd,EAAKU,QAAO,SAAAL,GAAG,OAAIU,OAAOV,EAAI,MAAQ5B,GAAQsC,OAAOV,EAAI,MAAQ/B,MAC9FW,EAAmB4B,GACnBxB,eAAe2B,QAAQ,YAAaH,EAAYI,YAChDrC,GAAW,MAEZsC,OAAM,SAAUpC,GACfgB,QAAQC,IAAIjB,GACZF,GAAW,GACXG,EAASD,QAWd,IAEHgB,QAAQC,IAAI,kBAAmBf,GAE/B,IAAMmC,EAASnC,GAAmBA,EAAgB,GAC5CoC,EAAapC,GAAmBA,EAAgB,GAChDqC,EAAQrC,GAAmBA,EAAgB,GAC3CsC,EAAWtC,GAAmBA,EAAgB,GAC9CuC,EAAUvC,GAAmBA,EAAgB,GAC7CwC,EAAUxC,GAAmB+B,OAAQ,EAAE,GAAM/B,EAAgB,GAAK,KAAKyC,QAAQ,GAC/EC,EAAS1C,GAAmB+B,OAAQ,EAAE,GAAM/B,EAAgB,GAAK,KAAKyC,QAAQ,GAC9EE,EAAW3C,IAAoBA,EAAgB,GAAM,yBAAK4C,wBAAyB,CAAEC,OAAQC,IAAUC,SAAS/C,EAAgB,YAAaH,GAE7ImD,GAAkBb,IAAWC,IAAeC,IAAUC,IAAaC,EAEzE,OAAI5C,EAAgB,oDAEfK,GAAmBgD,EAAuB,4FAE3ClD,EAAc,0EAqBhB,yBAAKmD,UAAU,2BACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,cACb,uBAAGA,UAtBW,SAAAd,GACpB,OAAOA,EAAOe,eACZ,IAAK,YACL,IAAK,WACH,MAAO,mBACT,IAAK,YACL,IAAK,WACH,MAAO,mBACT,IAAK,WACL,IAAK,UACH,MAAO,cACT,IAAK,aACL,IAAK,YACL,QACE,MAAO,cAQSC,CAAchB,GAASiB,cAAY,SACjD,wBAAIH,UAAU,oBAAd,WAA0Cd,IAE5C,yBAAKc,UAAU,gBAAf,UACMb,GADN,KACqB,6BADrB,oBACqCC,GADrC,IAC8C,6BAD9C,mBAC6DG,EAD7D,oBAC2EF,EAD3E,uBAC6FI,EAD7F,oBAC0GH,EAD1G,gBAIF,yBAAKU,UAAU,wBACZN,GAAsB,8CCxFXU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,gBD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdjC,OAAM,SAAApC,GACLgB,QAAQhB,MAAMA,EAAMsE,c","file":"static/js/main.07360a7d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport _compact from \"lodash/compact\";\r\nimport _flatten from \"lodash/flatten\";\r\nimport moment from \"moment\";\r\nimport DOMPurify from 'dompurify';\r\n\r\nfunction App() {  \r\n  let week = moment().isoWeek()\r\n  let year = moment().year()\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(undefined)\r\n  const [weatherThisWeek, setWeatherThisWeek] = useState(undefined)\r\n  \r\n  useEffect(() => {\r\n    const loggedWeatherWeek = sessionStorage.getItem('taWeather') ? sessionStorage.getItem('taWeather').split(',') : undefined\r\n        \r\n    let key\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        key = process.env.REACT_APP_API_KEY_DEV\r\n    } else {\r\n        key = process.env.REACT_APP_API_KEY_PROD\r\n    }\r\n    const spreadsheetId = \"1pTFMTJ3T3qPY_gbubuDJSjI2xHK92jfLXXzL_-rtsRE\"\r\n    var url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/?key=${key}&includeGridData=true`\r\n    \r\n    const getWeather = () => axios.get(url)\r\n        .then(function (response) {\r\n          console.log(response);\r\n          const rows = response?.data?.sheets[0]?.data[0]?.rowData.map(row => _compact(row.values.map(value => value?.formattedValue))).filter((arr) => arr.length)\r\n          const getThisWeek = _flatten(rows.filter(row => Number(row[0]) === year && Number(row[1]) === week))\r\n          setWeatherThisWeek(getThisWeek)\r\n          sessionStorage.setItem('taWeather', getThisWeek.toString())\r\n          setLoading(false);                                                                                                                                   \r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);         \r\n          setLoading(false);\r\n          setError(error);                                                                                                                 \r\n        });\r\n        \r\n    // use cached weather if available\r\n    if (loggedWeatherWeek) {\r\n      setWeatherThisWeek(loggedWeatherWeek)\r\n      setLoading(false)\r\n    } else {\r\n      getWeather()\r\n    }\r\n    // eslint-disable-next-line \r\n  }, [])   \r\n  \r\n  console.log(\"weatherThisWeek\", weatherThisWeek)\r\n  \r\n  const season = weatherThisWeek && weatherThisWeek[3]\r\n  const conditions = weatherThisWeek && weatherThisWeek[7]\r\n  const winds = weatherThisWeek && weatherThisWeek[6]\r\n  const highTemp = weatherThisWeek && weatherThisWeek[4]\r\n  const lowTemp = weatherThisWeek && weatherThisWeek[5]\r\n  const highInC = weatherThisWeek && Number((5/9) * (weatherThisWeek[4] - 32)).toFixed(0)\r\n  const lowInC = weatherThisWeek && Number((5/9) * (weatherThisWeek[5] - 32)).toFixed(0)\r\n  const warnings = weatherThisWeek && (weatherThisWeek[8] ? (<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(weatherThisWeek[8]) }} />) : undefined)\r\n  \r\n  const missingWeather = !season || !conditions || !winds || !highTemp || !lowTemp\r\n    \r\n  if (loading) return <div>Loading weather...</div>\r\n  \r\n  if (!weatherThisWeek || missingWeather) return <div>StarClan needs to provide a weather forecast for this week!</div>\r\n  \r\n  if (error) return <div>Uh oh! The weather's broken, tell Bandit!</div>\r\n  \r\n  const seasonClasses = season => {\r\n    switch(season.toLowerCase()) {\r\n      case \"leaf-fall\":\r\n      case \"leaffall\":\r\n        return \"fab fa-pagelines\"\r\n      case \"leaf-bare\":\r\n      case \"leafbare\":\r\n        return \"far fa-snowflake\"\r\n      case \"new-leaf\":\r\n      case \"newleaf\":\r\n        return \"fas fa-leaf\"\r\n      case \"green-leaf\":\r\n      case \"greenleaf\":\r\n      default:\r\n        return \"fas fa-sun\"  \r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App bth-weather-content\">\r\n      <div className=\"bth-season-forecast-wrapper\">\r\n        <div className=\"bth-season\">\r\n          <i className={seasonClasses(season)} aria-hidden=\"true\"></i>\r\n          <h3 className=\"bth-season-title\">Season: {season}</h3>\r\n        </div>\r\n        <div className=\"bth-forecast\">\r\n          {`${conditions}`}. <br/> {`Winds ${winds}`}.<br/> {`High ${highInC}℃ / ${highTemp}℉. Low ${lowInC}℃ / ${lowTemp}℉`}.\r\n        </div>\r\n      </div>\r\n      <div className=\"bth-weather-warnings\">\r\n        {warnings ? warnings : \"No severe weather warnings at this time.\"}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('weather-app')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}